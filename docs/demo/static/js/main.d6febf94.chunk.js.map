{"version":3,"sources":["components/ResponsiveButton.tsx","util/copyUpdater.ts","util/order.ts","util/ValidationResult.ts","util/Filter.ts","util/dispatcher.ts","model/GlobalState.ts","util/displayHelper.ts","components/TaskEditor.tsx","storage/LocalStorage.ts","components/FilterButton.tsx","components/ContextsButton.tsx","components/ProjectsButton.tsx","components/TagsButton.tsx","components/TaskListItem.tsx","components/TaskList.tsx","components/DueFilters.tsx","components/TaskOverview.tsx","components/Inbox.tsx","components/SomedayMaybe.tsx","components/MainView.tsx","components/ConfigEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ResponsiveButton","props","Button","startIcon","icon","Hidden","xsDown","extended","copyAndUpdate","object","field","newValue","maxDate","Date","getTime","sortAndUniqueString","strings","compare","s1","s2","localeCompare","sort","filter","value","index","elements","defaultTaskOrder","t1","t2","accessors","accessor","v1","v2","order","t","done","due","priority","title","toLocaleLowerCase","ValidationResult","_results","this","length","findIndex","result","find","message","push","matches","filterProperties","taskProperties","reduce","found","prop","fprop","inboxFilter","config","tasks","task","showFutureStart","start","now","postponed","contexts","somedayMaybeFilter","storage","state","action","newState","type","items","selectedContexts","selectedProjects","selectedTags","subtype","name","idx","ctx","splice","handleFilterAction","created","create","updateIdx","id","equals","update","deleteIdx","handleTaskAction","concat","handleTaskBulkAction","dueIn","undefined","handleDueFilterAction","setting","putConfig","handleConfigAction","flatMap","projects","extractProjects","tags","extractTags","inboxEmpty","somedayMaybeEmpty","Dispatcher","React","createContext","ev","GlobalState","toDateDisplay","input","date","toISOString","slice","useStyles","makeStyles","theme","createStyles","buttons","marginLeft","marginRight","marginTop","spacing","error","backgroundColor","palette","main","color","contrastText","margin","padding","SkipButton","withStyles","root","orange","PostponeButton","yellow","ActivationDialog","Dialog","open","aria-labelledby","DialogTitle","Typography","onClick","onClose","validate","addError","StateButton","StyledButton","grey","green","textDecoration","variant","className","TaskEditorControl","classes","useState","editedTask","setEditedTask","validation","setValidation","activationRequest","setActivationRequest","handleChange","target","Consumer","isNew","hasAnyError","Paper","FormControl","required","hasError","InputLabel","htmlFor","Input","placeholder","onChange","FormHelperText","multiline","description","label","options","SelectProps","isCreatable","isMulti","fullWidth","nv","values","valueAsDate","Select","MenuItem","ButtonGroup","aria-label","res","onSave","onPostpone","onSkip","style","display","canSkip","onCancel","activate","TaskEditor","history","useHistory","dispatch","useContext","goBack","LocalStorage","openDb","db","transaction","objectStore","getAll","console","log","map","Guid","parse","versionedTask","updateVersion","toString","tx","put","get","showDone","storedValue","openDB","upgrade","oldVersion","newVersion","upgradeV1","upgradeV2","upgradeV3","version","hash","createObjectStore","keyPath","oldDb","objects","close","newObject","FilterButton","anchorEl","setAnchorEl","aria-controls","aria-haspopup","text","currentTarget","disabled","entries","Menu","keepMounted","Boolean","entry","key","selected","ListItemIcon","ListItemText","ContextsButton","Badge","invisible","c","selectedEntry","ProjectsButton","project","p","TagsButton","tag","metaEntry","whiteSpace","metaText","dueToday","primary","overdue","borderRadius","width","height","textAlign","paddingBottom","paddingLeft","paddingRight","prioA","red","getContrastText","prioB","prioC","prioD","prioE","lightBlue","prioF","DueClass","today","PrioDisplay","prioClass","prio","AgeDisplay","age","formatDistance","fontSize","MetaDisplay","join","toLocaleDateString","TaskListItem","ListItem","button","secondary","TaskList","DueFilters","appBar","top","bottom","search","position","shape","fade","common","white","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","settings","TaskOverview","AppBar","Toolbar","differenceInDays","Inbox","SomedayMaybe","TabPanel","component","role","children","addButton","zIndex","left","right","tabs","tabPanel","overflowY","smallBorder","marginBottom","normalBorder","TabHeader","smallScreen","useMediaQuery","down","Tabs","indicatorColor","path","Tab","TabContent","exact","MainView","render","match","location","pathname","Fab","backButton","backButtonRoot","ConfigEditor","FormControlLabel","control","Checkbox","checked","FindTask","useParams","taskId","createMuiTheme","App","useReducer","bind","useEffect","loadTasks","then","Provider","ThemeProvider","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6febf94.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Hidden } from '@material-ui/core';\nimport { ButtonProps } from '@material-ui/core/Button';\n\nexport interface ResponsiveButtonProps extends ButtonProps {\n    icon: JSX.Element;\n    extended: JSX.Element | string;\n}\n\nexport function ResponsiveButton(props: ResponsiveButtonProps) {\n    return (\n        <Button startIcon={props.icon} {...props}>\n            <Hidden xsDown>{props.extended}</Hidden>\n        </Button>\n    );\n}\n","export function copyAndUpdate<TObject, TField>(\n    object: TObject,\n    field: keyof TObject,\n    newValue: TField\n): TObject {\n    return {\n        ...object,\n        [field]: newValue\n    };\n}\n","import { Task } from 'brain-common';\n\nexport const maxDate = new Date('9999-12-31').getTime();\n\n/**\n * order objects by multiple fields\n *\n * @param t1 The first object\n * @param t2 The second object\n */\nexport function order<T>(t1: T, t2: T, accessors: ((obj: T) => any)[]) {\n    for (let accessor of accessors) {\n        const v1 = accessor(t1);\n        const v2 = accessor(t2);\n        if (v1 !== v2) {\n            return v1 > v2 ? 1 : -1;\n        }\n    }\n    return 0;\n}\n\n/**\n * Sort and array and make its entries unique\n * @param elements The array of strings to sort and make unique\n */\nexport function sortAndUnique<T>(\n    elements: T[],\n    compare: (e1: T, e2: T) => number\n): T[] {\n    return elements\n        .sort(compare)\n        .filter(\n            (value, index, elements) =>\n                index === 0 || compare(elements[index - 1], value) !== 0\n        );\n}\n\nexport function sortAndUniqueString(strings: string[]) {\n    return sortAndUnique(strings, (s1, s2) => s1.localeCompare(s2));\n}\n\nexport const defaultTaskOrder = (t1: Task, t2: Task) =>\n    order(t1, t2, [\n        t => !!t.done,\n        t => t.due || maxDate,\n        t => t.priority || 'Z',\n        t => t.title.toLocaleLowerCase()\n    ]);\n","export class ValidationResult {\n    private _results: { field: string; message: string }[] = [];\n\n    public hasAnyError(): boolean {\n        return this._results.length !== 0;\n    }\n\n    public hasError(field: string): boolean {\n        return this._results.findIndex(result => result.field === field) !== -1;\n    }\n\n    public error(field: string): string | undefined {\n        const result = this._results.find(result => result.field === field);\n        return result && result.message;\n    }\n\n    public addError(field: string, message: string) {\n        this._results.push({ field: field, message: message });\n    }\n}\n","import { Task } from 'brain-common';\nimport { differenceInDays } from 'date-fns/esm';\nimport { IGlobalConfig } from '../model/GlobalConfig';\n\nfunction matches(filterProperties: string[], taskProperties?: string[]) {\n    return (\n        filterProperties.length === 0 ||\n        (taskProperties &&\n            taskProperties.reduce(\n                (found: boolean, prop: string) =>\n                    found || !!filterProperties.find(fprop => fprop === prop),\n                false\n            ))\n    );\n}\n\nexport function overviewFilter(\n    config: IGlobalConfig,\n    tasks: Task[],\n    selectedContexts: string[],\n    selectedProjects: string[],\n    selectedTags: string[],\n    dueIn?: number\n): Task[] {\n    return tasks.filter(task => {\n        return (\n            !task.postponed && // postponed tasks are by definition not visible\n            !!task.contexts && // only tasks that have a context are in the overview.\n            task.contexts.length > 0 && // Tasks without any contexts are in the inbox by definition\n            (config.showDone || !task.done) && // show done tasks only when requested by the config\n            (config.showFutureStart ||\n                !task.start ||\n                task.start <= Date.now()) && // show items depending on whether their start date has passed\n            matches(selectedContexts, task.contexts) &&\n            matches(selectedProjects, task.projects) &&\n            matches(selectedTags, task.tags) &&\n            (dueIn === undefined ||\n                (task.due && differenceInDays(task.due, new Date()) < dueIn))\n        );\n    });\n}\n\nexport function inboxFilter(config: IGlobalConfig, tasks: Task[]): Task[] {\n    return tasks.filter(task => {\n        return (\n            (config.showFutureStart ||\n                !task.start ||\n                task.start <= Date.now()) && // show items depending on whether their start date has passed\n            !task.postponed &&\n            (!task.contexts || task.contexts.length === 0)\n        );\n    }); // The inbox contains (by definition) tasks not yet assigned to any context\n}\n\nexport function somedayMaybeFilter(tasks: Task[]): Task[] {\n    return tasks.filter(task => !!task.postponed); // Someday/Maybe is a specific flag on the task\n}\n","import React from 'react';\nimport { Task } from 'brain-common';\nimport { IGlobalState } from '../model/GlobalState';\nimport { sortAndUniqueString } from './order';\nimport { LocalStorage } from '../storage/LocalStorage';\nimport { inboxFilter, somedayMaybeFilter } from './Filter';\nimport { IGlobalConfig } from '../model/GlobalConfig';\n\nexport interface ITaskAction {\n    type: 'task';\n    subtype: 'create' | 'update' | 'delete' | 'load';\n    task: Task;\n}\n\nexport interface ITaskBulkAction {\n    type: 'bulk';\n    subtype: 'load';\n    tasks: Task[];\n}\n\nexport function taskAction(\n    task: Task,\n    action: 'create' | 'update' | 'delete' | 'load'\n): ITaskAction {\n    return {\n        type: 'task',\n        subtype: action,\n        task: task\n    };\n}\n\nexport interface IFilterAction {\n    type: 'context' | 'project' | 'tag';\n    subtype: 'select' | 'deselect';\n    name: string;\n}\n\nexport interface IDueFilterAction {\n    type: 'due';\n    subtype: 'select' | 'deselect';\n    value?: number;\n}\n\nexport interface IConfigAction {\n    type: 'loadConfig';\n    config: IGlobalConfig;\n}\n\nexport interface IConfigChangeAction {\n    type: 'config';\n    setting: keyof IGlobalConfig;\n    value: any;\n}\n\nfunction handleFilterAction(\n    newState: IGlobalState,\n    action: IFilterAction\n): IGlobalState {\n    let items: string[] = [];\n    switch (action.type) {\n        case 'context':\n            items = [...newState.selectedContexts];\n            break;\n        case 'project':\n            items = [...newState.selectedProjects];\n            break;\n        case 'tag':\n            items = [...newState.selectedTags];\n            break;\n    }\n    switch (action.subtype) {\n        case 'select':\n            items.push(action.name);\n            items = sortAndUniqueString(items);\n            break;\n        case 'deselect':\n            var idx = items.findIndex(ctx => ctx === action.name);\n            if (idx !== -1) {\n                items.splice(idx, 1);\n            }\n            break;\n    }\n    switch (action.type) {\n        case 'context':\n            newState.selectedContexts = items;\n            break;\n        case 'project':\n            newState.selectedProjects = items;\n            break;\n        case 'tag':\n            newState.selectedTags = items;\n            break;\n    }\n    return newState;\n}\n\nfunction handleTaskAction(\n    storage: LocalStorage,\n    newState: IGlobalState,\n    action: ITaskAction\n) {\n    switch (action.subtype) {\n        case 'create':\n            action.task.created = Date.now();\n            newState.tasks.push(action.task);\n            storage.create(action.task);\n            break;\n        case 'update':\n            const updateIdx = newState.tasks.findIndex(task =>\n                task.id.equals(action.task.id)\n            );\n            if (updateIdx !== -1) {\n                newState.tasks.splice(\n                    updateIdx,\n                    1,\n                    (action as ITaskAction).task\n                );\n            }\n            storage.update(action.task);\n            break;\n        case 'delete':\n            const deleteIdx = newState.tasks.findIndex(task =>\n                task.id.equals(action.task.id)\n            );\n            if (deleteIdx !== -1) {\n                newState.tasks.splice(deleteIdx, 1);\n            }\n            break;\n        case 'load':\n            newState.tasks.push(action.task);\n            break;\n    }\n    return newState;\n}\n\nfunction handleTaskBulkAction(newState: IGlobalState, action: ITaskBulkAction) {\n    switch (action.subtype) {\n        case 'load':\n            newState.tasks = newState.tasks.concat(action.tasks);\n            break;\n    }\n    return newState;\n}\n\nfunction handleDueFilterAction(\n    newState: IGlobalState,\n    action: IDueFilterAction\n) {\n    if (action.subtype === 'deselect') {\n        newState.dueIn = undefined;\n    } else {\n        newState.dueIn = action.value;\n    }\n    return newState;\n}\n\n/**\n * The global reducer function handling application state transitions\n * @param state The current state of the applicatoin\n * @param action The action to update the global state\n */\nexport function reduce(\n    storage: LocalStorage,\n    state: IGlobalState,\n    action:\n        | ITaskAction\n        | ITaskBulkAction\n        | IFilterAction\n        | IDueFilterAction\n        | IConfigChangeAction\n        | IConfigAction\n): IGlobalState {\n    let newState = { ...state };\n    newState.tasks = [...state.tasks];\n    switch (action.type) {\n        case 'context':\n        case 'project':\n        case 'tag':\n            newState = handleFilterAction(newState, action as IFilterAction);\n            break;\n        case 'task':\n            newState = handleTaskAction(\n                storage,\n                newState,\n                action as ITaskAction\n            );\n            break;\n        case 'bulk':\n            newState = handleTaskBulkAction(\n                newState,\n                action as ITaskBulkAction\n            );\n            break;\n        case 'due':\n            newState = handleDueFilterAction(\n                newState,\n                action as IDueFilterAction\n            );\n            break;\n        case 'config':\n            newState = handleConfigAction(\n                storage,\n                newState,\n                action as IConfigChangeAction\n            );\n            break;\n        case 'loadConfig':\n            newState.config = action.config;\n    }\n    newState.contexts = extractContexts(newState.tasks);\n    newState.projects = extractProjects(newState.tasks);\n    newState.tags = extractTags(newState.tasks);\n    newState.inboxEmpty =\n        inboxFilter(newState.config, newState.tasks).length === 0;\n    newState.somedayMaybeEmpty =\n        somedayMaybeFilter(newState.tasks).length === 0;\n    return newState;\n}\n\nfunction extractContexts(tasks: Task[]): string[] {\n    return sortAndUniqueString(\n        tasks.filter(task => !task.done).flatMap(task => task.contexts || [])\n    );\n}\n\nfunction extractProjects(tasks: Task[]): string[] {\n    return sortAndUniqueString(\n        tasks.filter(task => !task.done).flatMap(task => task.projects || [])\n    );\n}\n\nfunction extractTags(tasks: Task[]): string[] {\n    return sortAndUniqueString(\n        tasks.filter(task => !task.done).flatMap(task => task.tags || [])\n    );\n}\n\nexport function handleConfigAction(\n    storage: LocalStorage,\n    newState: IGlobalState,\n    action: IConfigChangeAction\n): IGlobalState {\n    newState.config = {\n        ...newState.config,\n        [action.setting]: action.value\n    };\n    storage.putConfig(newState.config);\n    return newState;\n}\n\nexport const Dispatcher = React.createContext<\n    React.Dispatch<\n        | ITaskAction\n        | ITaskBulkAction\n        | IFilterAction\n        | IDueFilterAction\n        | IConfigChangeAction\n    >\n>(ev => {});\n","import { Task } from 'brain-common';\nimport React from 'react';\nimport { IGlobalConfig } from './GlobalConfig';\n\nexport interface IGlobalState {\n    tasks: Task[];\n    contexts: string[];\n    projects: string[];\n    tags: string[];\n    dueIn?: number; // filter for the maximum number of days in which an item may be due to be shown\n    selectedContexts: string[];\n    selectedProjects: string[];\n    selectedTags: string[];\n    inboxEmpty: boolean;\n    somedayMaybeEmpty: boolean;\n    config: IGlobalConfig;\n}\n\nexport const GlobalState = React.createContext({} as IGlobalState);\n","export function toDateDisplay(input: number): string {\n    const date = new Date(input);\n    return date && date.toISOString().slice(0, 10);\n}\n","import { Task } from 'brain-common';\nimport { Fragment, useState, useContext } from 'react';\nimport React from 'react';\nimport {\n    Input,\n    InputLabel,\n    FormControl,\n    Button,\n    ButtonGroup,\n    makeStyles,\n    createStyles,\n    withStyles,\n    FormHelperText,\n    Paper,\n    Select,\n    MenuItem,\n    Dialog,\n    DialogTitle,\n    Typography\n} from '@material-ui/core';\nimport { green, orange, yellow } from '@material-ui/core/colors';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport AllInclusiveIcon from '@material-ui/icons/AllInclusive';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport { ResponsiveButton } from './ResponsiveButton';\nimport { useHistory } from 'react-router-dom';\nimport ReactSelectMaterialUi from 'react-select-material-ui';\nimport { copyAndUpdate } from '../util/copyUpdater';\nimport { sortAndUniqueString } from '../util/order';\nimport { ValidationResult } from '../util/ValidationResult';\nimport { ITaskAction, Dispatcher } from '../util/dispatcher';\nimport { GlobalState } from '../model/GlobalState';\nimport { toDateDisplay } from '../util/displayHelper';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        buttons: {\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            marginTop: theme.spacing(2)\n        },\n        error: {\n            backgroundColor: theme.palette.error.main,\n            color: theme.palette.error.contrastText,\n            margin: 'auto',\n            padding: theme.spacing(1)\n        }\n    })\n);\n\nconst SkipButton = withStyles({\n    root: {\n        backgroundColor: orange[500]\n    }\n})(ResponsiveButton);\n\nconst PostponeButton = withStyles({\n    root: {\n        backgroundColor: yellow[500]\n    }\n})(ResponsiveButton);\n\nfunction ActivationDialog(props: {\n    open: boolean;\n    onClose: (answer: boolean) => void;\n}) {\n    return (\n        <Dialog open={props.open} aria-labelledby='dialog-title'>\n            <DialogTitle id='dialog-title'>Activate task?</DialogTitle>\n            <Typography>\n                This task is currently postponed and will only be visible in\n                Someday/Maybe. Activate it?\n            </Typography>\n            <Button onClick={() => props.onClose(true)}>Activate</Button>\n            <Button onClick={() => props.onClose(false)}>\n                Leave postponed\n            </Button>\n        </Dialog>\n    );\n}\n\nexport interface TaskEditorProps {\n    task: Task;\n    isNew?: boolean;\n    onClose?: (abort: boolean) => void;\n    canSkip?: boolean; // does the editor have skip button (i.e. it's running in the context of the inbox processing assistent)\n}\n\nexport interface TaskEditorControlProps {\n    task: Task;\n    isNew?: boolean;\n    onSave?: (newState: Task) => void;\n    onPostpone?: (newState: Task) => void;\n    onCancel?: () => void;\n    onSkip?: () => void;\n    canSkip?: boolean; // does the editor have skip button (i.e. it's running in the context of the inbox processing assistent)\n}\n\nfunction validate(task: Task): ValidationResult {\n    const result = new ValidationResult();\n    if (!task.title || task.title === '') {\n        result.addError('title', 'Task title is required');\n    }\n    return result;\n}\n\nfunction StateButton(props: { task: Task; onClick: () => void }) {\n    const StyledButton = withStyles(theme => ({\n        root: {\n            backgroundColor: props.task.done\n                ? theme.palette.grey[500]\n                : green[500],\n            '& .stateText': {\n                textDecoration: props.task.done ? 'line-through' : 'none'\n            },\n            margin: theme.spacing(1)\n        }\n    }))(Button);\n    return (\n        <StyledButton\n            variant='contained'\n            color='primary'\n            onClick={props.onClick}>\n            <span className='stateText'>\n                Task is {props.task.done ? 'done. ' : 'open. '}\n            </span>\n            <span>{props.task.done ? 'Reopen?' : 'Finish?'}</span>\n        </StyledButton>\n    );\n}\n\nexport function TaskEditorControl(props: TaskEditorControlProps) {\n    const classes = useStyles();\n    const [editedTask, setEditedTask] = useState({ ...props.task });\n    const [validation, setValidation] = useState<ValidationResult>(\n        new ValidationResult()\n    );\n    const [activationRequest, setActivationRequest] = useState(false);\n    const handleChange = (name: keyof Task) => {\n        return (ev: React.ChangeEvent<HTMLInputElement>) => {\n            setEditedTask(copyAndUpdate(editedTask, name, ev.target.value));\n        };\n    };\n\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Fragment>\n                    <h1>{props.isNew ? 'Create' : 'Edit'} task</h1>\n                    {validation.hasAnyError() && (\n                        <Paper className={classes.error}>\n                            Could not save task.\n                        </Paper>\n                    )}\n                    <FormControl>\n                        <FormControl\n                            required\n                            error={validation.hasError('title')}>\n                            <InputLabel htmlFor='title'>Title</InputLabel>\n                            <Input\n                                id='title'\n                                placeholder='Task title'\n                                value={editedTask.title || ''}\n                                onChange={handleChange('title')}\n                            />\n                            {validation.hasError('title') && (\n                                <FormHelperText>\n                                    {validation.error('title')}\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                        <StateButton\n                            task={editedTask}\n                            onClick={() =>\n                                setEditedTask({\n                                    ...editedTask,\n                                    done: !editedTask.done\n                                })\n                            }\n                        />\n                        <FormControl>\n                            <InputLabel htmlFor='Description'>\n                                Description\n                            </InputLabel>\n                            <Input\n                                id='description'\n                                multiline\n                                value={editedTask.description || ''}\n                                placeholder='Description'\n                                onChange={handleChange('description')}\n                            />\n                        </FormControl>\n                        <ReactSelectMaterialUi\n                            label='Contexts'\n                            options={sortAndUniqueString(\n                                state.contexts.concat(editedTask.contexts || [])\n                            )}\n                            SelectProps={{ isCreatable: true, isMulti: true }}\n                            fullWidth={true}\n                            onChange={(newValue: any) => {\n                                const nv = copyAndUpdate(\n                                    editedTask,\n                                    'contexts',\n                                    newValue\n                                );\n                                setEditedTask(nv);\n                            }}\n                            values={editedTask.contexts}\n                        />\n                        <ReactSelectMaterialUi\n                            label='Projects'\n                            options={sortAndUniqueString(\n                                state.projects.concat(editedTask.projects || [])\n                            )}\n                            SelectProps={{ isCreatable: true, isMulti: true }}\n                            fullWidth={true}\n                            onChange={(newValue: any) => {\n                                const nv = copyAndUpdate(\n                                    editedTask,\n                                    'projects',\n                                    newValue\n                                );\n                                setEditedTask(nv);\n                            }}\n                            values={editedTask.projects}\n                        />\n                        <ReactSelectMaterialUi\n                            label='Tags'\n                            options={sortAndUniqueString(\n                                state.tags.concat(editedTask.tags || [])\n                            )}\n                            SelectProps={{ isCreatable: true, isMulti: true }}\n                            fullWidth={true}\n                            onChange={(newValue: any) => {\n                                const nv = copyAndUpdate(\n                                    editedTask,\n                                    'tags',\n                                    newValue\n                                );\n                                setEditedTask(nv);\n                            }}\n                            values={editedTask.tags}\n                        />\n                        <FormControl>\n                            Start:\n                            <input\n                                id='start'\n                                type='date'\n                                value={\n                                    (editedTask.start &&\n                                        toDateDisplay(editedTask.start)) ||\n                                    ''\n                                }\n                                onChange={ev => {\n                                    const nv = copyAndUpdate(\n                                        editedTask,\n                                        'start',\n                                        ev.target.valueAsDate &&\n                                            ev.target.valueAsDate.getTime()\n                                    );\n                                    setEditedTask(nv);\n                                }}\n                            />\n                        </FormControl>\n                        <FormControl>\n                            Due:\n                            <input\n                                id='due'\n                                type='date'\n                                value={\n                                    (editedTask.due &&\n                                        toDateDisplay(editedTask.due)) ||\n                                    ''\n                                }\n                                onChange={ev => {\n                                    const nv = copyAndUpdate(\n                                        editedTask,\n                                        'due',\n                                        ev.target.valueAsDate &&\n                                            ev.target.valueAsDate.getTime()\n                                    );\n                                    setEditedTask(nv);\n                                }}\n                            />\n                        </FormControl>\n                        <FormControl>\n                            <InputLabel htmlFor='priority'>Priority</InputLabel>\n                            <Select\n                                id='priority'\n                                value={editedTask.priority || ' '}\n                                onChange={ev =>\n                                    setEditedTask(\n                                        copyAndUpdate(\n                                            editedTask,\n                                            'priority',\n                                            ev.target.value === ' '\n                                                ? undefined\n                                                : ev.target.value\n                                        )\n                                    )\n                                }>\n                                <MenuItem value={' '}>[None]</MenuItem>\n                                <MenuItem value={'A'}>A</MenuItem>\n                                <MenuItem value={'B'}>B</MenuItem>\n                                <MenuItem value={'C'}>C</MenuItem>\n                                <MenuItem value={'D'}>D</MenuItem>\n                                <MenuItem value={'E'}>E</MenuItem>\n                                <MenuItem value={'F'}>F</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <ButtonGroup className={classes.buttons}>\n                            <ResponsiveButton\n                                icon={<SaveIcon />}\n                                extended='Save'\n                                color='primary'\n                                variant='contained'\n                                aria-label='Save'\n                                onClick={() => {\n                                    const res = validate(editedTask);\n                                    if (res.hasAnyError()) {\n                                        setValidation(res);\n                                    } else {\n                                        props.onSave &&\n                                            props.onSave(editedTask);\n                                    }\n                                }}\n                            />\n                            <PostponeButton\n                                icon={\n                                    !!editedTask.postponed ? (\n                                        <PlayIcon />\n                                    ) : (\n                                        <AllInclusiveIcon />\n                                    )\n                                }\n                                extended={\n                                    !!editedTask.postponed\n                                        ? 'Activate'\n                                        : 'Postpone'\n                                }\n                                color='primary'\n                                variant='contained'\n                                aria-label={\n                                    !!editedTask.postponed\n                                        ? 'Activate'\n                                        : 'Postpone'\n                                }\n                                onClick={() => {\n                                    const res = validate(editedTask);\n                                    if (res.hasAnyError()) {\n                                        setValidation(res);\n                                    } else {\n                                        props.onPostpone &&\n                                            props.onPostpone(editedTask);\n                                    }\n                                }}\n                            />\n                            <SkipButton\n                                icon={<SkipNextIcon />}\n                                extended='Skip task'\n                                color='primary'\n                                variant='contained'\n                                aria-label='Skip task'\n                                onClick={() => {\n                                    props.onSkip && props.onSkip();\n                                }}\n                                style={{\n                                    display: props.canSkip\n                                        ? 'inline-block'\n                                        : 'none'\n                                }}\n                            />\n                            <ResponsiveButton\n                                icon={<CancelIcon />}\n                                extended='Cancel'\n                                color='secondary'\n                                variant='contained'\n                                aria-label='Cancel'\n                                onClick={() =>\n                                    props.onCancel && props.onCancel()\n                                }\n                            />\n                        </ButtonGroup>\n                    </FormControl>\n                    <ActivationDialog\n                        open={activationRequest}\n                        onClose={activate => {\n                            if (activate) {\n                                editedTask.postponed = false;\n                            }\n                            props.onSave && props.onSave(editedTask);\n                            setActivationRequest(false);\n                        }}\n                    />\n                </Fragment>\n            )}\n        </GlobalState.Consumer>\n    );\n}\n\nexport function TaskEditor(props: TaskEditorProps) {\n    const history = useHistory();\n    const dispatch = useContext(Dispatcher);\n\n    const handlePostpone = (newState: Task) => {\n        newState.postponed = !newState.postponed;\n        dispatch({\n            type: 'task',\n            subtype: props.isNew ? 'create' : 'update',\n            task: newState\n        } as ITaskAction);\n        history.goBack();\n    };\n\n    const handleSave = (newState: Task) => {\n        dispatch({\n            type: 'task',\n            subtype: props.isNew ? 'create' : 'update',\n            task: newState\n        } as ITaskAction);\n        history.goBack();\n    };\n\n    return (\n        <TaskEditorControl\n            task={props.task}\n            isNew={props.isNew}\n            onSave={handleSave}\n            onCancel={() => history.goBack()}\n            onPostpone={handlePostpone}\n        />\n    );\n}\n","import { Task, LegacyTask } from 'brain-common';\nimport { openDB, IDBPDatabase, DBSchema, IDBPTransaction } from 'idb';\nimport { Guid } from 'guid-typescript';\nimport hash from 'object-hash';\nimport { TaskDto } from 'brain-common';\nimport { IGlobalConfig } from '../model/GlobalConfig';\n\ninterface TaskDBSchema extends TaskDBSchemav2Schema {\n    config: { key: string; value: IGlobalConfig };\n}\n\ninterface TaskDBSchemav2Schema extends DBSchema {\n    tasks: { key: string; value: TaskDto };\n}\n\ninterface TaskDBv1Schema extends DBSchema {\n    tasks: { key: string; value: LegacyTask };\n}\n\nexport class LocalStorage {\n    public async loadTasks(): Promise<Task[]> {\n        const db = await this.openDb();\n        const tasks = await db\n            .transaction('tasks')\n            .objectStore('tasks')\n            .getAll();\n        console.log(`Loaded ${tasks.length} stored tasks`);\n        return tasks.map(task => ({\n            ...task,\n            id: Guid.parse(task.id)\n        }));\n    }\n\n    public async create(task: Task): Promise<void> {\n        const versionedTask = LocalStorage.updateVersion({\n            ...task,\n            id: task.id.toString()\n        });\n        const db = await this.openDb();\n        const tx = db.transaction('tasks', 'readwrite');\n        await tx.objectStore('tasks').put(versionedTask);\n        await tx.done;\n    }\n\n    public async update(task: Task): Promise<void> {\n        const versionedTask = LocalStorage.updateVersion({\n            ...task,\n            id: task.id.toString()\n        });\n        const db = await this.openDb();\n        console.log('Updating', versionedTask);\n        const tx = db.transaction('tasks', 'readwrite');\n        await tx.objectStore('tasks').put(versionedTask);\n        await tx.done;\n    }\n\n    public async config(): Promise<IGlobalConfig> {\n        const db = await this.openDb();\n        return (\n            (await db\n                .transaction('config')\n                .objectStore('config')\n                .get('global')) || {\n                id: 'global',\n                showDone: false,\n                showFutureStart: false\n            }\n        );\n    }\n\n    public async putConfig(config: IGlobalConfig): Promise<void> {\n        const db = await this.openDb();\n        const storedValue = {\n            ...config,\n            id: 'global'\n        };\n        await db\n            .transaction('config', 'readwrite')\n            .objectStore('config')\n            .put(storedValue);\n    }\n\n    private static updateVersion(task: TaskDto): TaskDto {\n        const newVersion = (task.version || 0) + 1;\n        return { ...task, version: newVersion, hash: hash(task) };\n    }\n\n    private async openDb() {\n        const db = await openDB<TaskDBSchema>('tasks', 3, {\n            async upgrade(db, oldVersion, newVersion, transaction) {\n                console.log(`Upgrading database to version ${newVersion}`);\n                if (oldVersion < 1) {\n                    LocalStorage.upgradeV1(db);\n                }\n                if (oldVersion < 2) {\n                    LocalStorage.upgradeV2(transaction);\n                }\n                if (oldVersion < 3) {\n                    LocalStorage.upgradeV3(db);\n                }\n                console.log('Finished.');\n            }\n        });\n        return db;\n    }\n\n    // database upgrade methods\n    private static async upgradeV1(db: IDBPDatabase<TaskDBSchema>) {\n        console.log('Creating the object store.');\n        db.createObjectStore('tasks', { keyPath: 'id' });\n    }\n\n    private static async upgradeV2(\n        transaction: IDBPTransaction<TaskDBSchema, ('tasks' | 'config')[]>\n    ) {\n        console.log('Transforming all existing objects to v2 schema');\n        const oldDb = await openDB<TaskDBv1Schema>('tasks', 3); // This does feel slightly wrong, but should be OK at this point, as no update has taken place yet\n        const objects = await oldDb\n            .transaction('tasks', 'readonly')\n            .objectStore('tasks')\n            .getAll();\n        oldDb.close();\n        for (let object of objects) {\n            const newObject: TaskDto = {\n                ...object,\n                due: object.due && object.due.getTime(),\n                created:\n                    (object.created && object.created.getTime()) || Date.now(),\n                version: 0,\n                hash: ''\n            };\n            await transaction\n                .objectStore('tasks')\n                .put(LocalStorage.updateVersion(newObject));\n        }\n    }\n\n    private static async upgradeV3(db: IDBPDatabase<TaskDBSchema>) {\n        db.createObjectStore('config', { keyPath: 'id' });\n    }\n}\n","import React, { Fragment, useState } from 'react';\nimport { ResponsiveButton } from './ResponsiveButton';\nimport { Menu, MenuItem, ListItemIcon, ListItemText } from '@material-ui/core';\n\nexport interface FilterEntry<T> {\n    text: string;\n    selected: boolean;\n    value?: T;\n}\n\nexport interface FilterButtonProps<T> {\n    entries: FilterEntry<T>[];\n    icon: JSX.Element;\n    text: string;\n    onChange?: (selectedEntry: FilterEntry<T>) => void;\n}\n\nexport function FilterButton<T>(props: FilterButtonProps<T>) {\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    return (\n        <Fragment>\n            <ResponsiveButton\n                aria-controls='simple-menu'\n                aria-haspopup='true'\n                color='inherit'\n                icon={props.icon}\n                extended={props.text}\n                onClick={(ev: React.MouseEvent<HTMLButtonElement>) =>\n                    setAnchorEl(ev.currentTarget)\n                }\n                disabled={props.entries.length === 0}\n            />\n            <Menu\n                id='contexts-menu'\n                keepMounted\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={ev => setAnchorEl(null)}>\n                {props.entries.map((entry, index) => (\n                    <MenuItem\n                        key={entry.text}\n                        onClick={() => {\n                            props.onChange && props.onChange(entry);\n                            setAnchorEl(null);\n                        }}\n                        selected={entry.selected}>\n                        <ListItemIcon>{props.icon}</ListItemIcon>\n                        <ListItemText>{entry.text}</ListItemText>\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Fragment>\n    );\n}\n","import React, { useContext } from 'react';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport { FilterButton } from './FilterButton';\nimport { IFilterAction, Dispatcher } from '../util/dispatcher';\nimport { GlobalState } from '../model/GlobalState';\nimport { Badge } from '@material-ui/core';\n\n/**\n * The contexts menu button\n *\n * @param props The properties of the contexts button\n */\nexport function ContextsButton() {\n    const dispatch = useContext(Dispatcher);\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <FilterButton\n                    icon={\n                        <Badge\n                            invisible={state.selectedContexts.length === 0}\n                            color='secondary'\n                            variant='dot'>\n                            <LandscapeIcon />\n                        </Badge>\n                    }\n                    text='Contexts'\n                    entries={state.contexts.map(ctx => ({\n                        text: ctx,\n                        selected: !!state.selectedContexts.find(c => c === ctx)\n                    }))}\n                    onChange={selectedEntry => {\n                        dispatch({\n                            type: 'context',\n                            subtype: selectedEntry.selected\n                                ? 'deselect'\n                                : 'select',\n                            name: selectedEntry.text\n                        } as IFilterAction);\n                    }}\n                />\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import React, { useContext } from 'react';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport { FilterButton } from './FilterButton';\nimport { GlobalState } from '../model/GlobalState';\nimport { IFilterAction, Dispatcher } from '../util/dispatcher';\nimport { Badge } from '@material-ui/core';\n\nexport function ProjectsButton() {\n    const dispatch = useContext(Dispatcher);\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <FilterButton\n                    icon={\n                        <Badge\n                            invisible={state.selectedProjects.length === 0}\n                            color='secondary'\n                            variant='dot'>\n                            <TableChartIcon />\n                        </Badge>\n                    }\n                    text='Projects'\n                    entries={state.projects.map(project => ({\n                        text: project,\n                        selected: !!state.selectedProjects.find(\n                            p => p === project\n                        )\n                    }))}\n                    onChange={selectedEntry => {\n                        dispatch({\n                            type: 'project',\n                            subtype: selectedEntry.selected\n                                ? 'deselect'\n                                : 'select',\n                            name: selectedEntry.text\n                        } as IFilterAction);\n                    }}\n                />\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import React, { useContext } from 'react';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport { FilterButton } from './FilterButton';\nimport { GlobalState } from '../model/GlobalState';\nimport { IFilterAction, Dispatcher } from '../util/dispatcher';\nimport { Badge } from '@material-ui/core';\n\n/**\n * The tags menu button\n *\n * @param props The properties of the tags button\n */\nexport function TagsButton() {\n    const dispatch = useContext(Dispatcher);\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <FilterButton\n                    icon={\n                        <Badge\n                            invisible={state.selectedTags.length === 0}\n                            color='secondary'\n                            variant='dot'>\n                            <LocalOfferIcon />\n                        </Badge>\n                    }\n                    text='Tags'\n                    entries={state.tags.map(tag => ({\n                        text: tag,\n                        selected: !!state.selectedTags.find(t => t === tag)\n                    }))}\n                    onChange={selectedEntry => {\n                        dispatch({\n                            type: 'tag',\n                            subtype: selectedEntry.selected\n                                ? 'deselect'\n                                : 'select',\n                            name: selectedEntry.text\n                        } as IFilterAction);\n                    }}\n                />\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import { Task, TaskPrio } from 'brain-common';\nimport React, { Fragment } from 'react';\nimport {\n    ListItem,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Typography\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport LandscapeIcon from '@material-ui/icons/Landscape';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport EventIcon from '@material-ui/icons/Event';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport PlayCircleIcon from '@material-ui/icons/PlayCircleOutline';\nimport {\n    red,\n    orange,\n    yellow,\n    green,\n    lightBlue,\n    grey\n} from '@material-ui/core/colors';\nimport { formatDistance } from 'date-fns';\nimport { toDateDisplay } from '../util/displayHelper';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        done: {\n            textDecoration: 'line-through',\n            color: theme.palette.grey[500]\n        },\n        metaEntry: {\n            marginLeft: '0.5em',\n            whiteSpace: 'nowrap'\n        },\n        metaText: {\n            whiteSpace: 'normal'\n        },\n        dueToday: {\n            color: theme.palette.primary.main\n        },\n        overdue: {\n            color: theme.palette.error.main\n        },\n        priority: {\n            borderRadius: '50%',\n            width: '1em',\n            height: '1em',\n            display: 'inline-block',\n            textAlign: 'center',\n            paddingBottom: theme.spacing(0.5),\n            paddingLeft: theme.spacing(0.25),\n            paddingRight: theme.spacing(0.25)\n        },\n        prioA: {\n            backgroundColor: red[500],\n            color: theme.palette.getContrastText(red[500])\n        },\n        prioB: {\n            backgroundColor: orange[500],\n            color: theme.palette.getContrastText(orange[500])\n        },\n        prioC: {\n            backgroundColor: yellow[500],\n            color: theme.palette.getContrastText(yellow[500])\n        },\n        prioD: {\n            backgroundColor: green[500],\n            color: theme.palette.getContrastText(green[500])\n        },\n        prioE: {\n            backgroundColor: lightBlue[200],\n            color: theme.palette.getContrastText(lightBlue[200])\n        },\n        prioF: {\n            backgroundColor: grey[500],\n            color: theme.palette.getContrastText(grey[500])\n        }\n    })\n);\n\n/**\n * Properties accepted by the TaskListItem component\n */\nexport interface TaskListItemProps {\n    task: Task;\n}\n\nfunction DueClass(task: Task): string {\n    const classes = useStyles();\n    const today = new Date(Date.now()).toISOString().slice(0, 10);\n    const due = task.due && toDateDisplay(task.due);\n    if (!due || due > today) {\n        return '';\n    }\n    if (due === today) {\n        return classes.dueToday;\n    }\n    return classes.overdue;\n}\n\nfunction PrioDisplay(props: { prio: TaskPrio }) {\n    const classes = useStyles();\n    let prioClass = undefined;\n    switch (props.prio) {\n        case 'A':\n            prioClass = classes.prioA;\n            break;\n        case 'B':\n            prioClass = classes.prioB;\n            break;\n        case 'C':\n            prioClass = classes.prioC;\n            break;\n        case 'D':\n            prioClass = classes.prioD;\n            break;\n        case 'E':\n            prioClass = classes.prioE;\n            break;\n        case 'F':\n            prioClass = classes.prioF;\n            break;\n    }\n    return (\n        <span className={`${classes.priority} ${prioClass}`}>{props.prio}</span>\n    );\n}\n\nfunction AgeDisplay(props: { created: Date; task: Task }) {\n    const classes = useStyles();\n    const age = formatDistance(props.created, new Date());\n    return (\n        props.created && (\n            <span className={classes.metaEntry}>\n                <SaveAltIcon fontSize='inherit' />\n                <Typography variant='srOnly'>Age</Typography>\n                <span className={classes.metaText}>{age} ago</span>\n            </span>\n        )\n    );\n}\n\nfunction MetaDisplay(props: { task: Task }) {\n    const classes = useStyles();\n    return (\n        <Fragment>\n            {props.task.priority && <PrioDisplay prio={props.task.priority} />}\n            {props.task.contexts && props.task.contexts.length !== 0 && (\n                <span className={classes.metaEntry}>\n                    <LandscapeIcon fontSize='inherit' />\n                    <Typography variant='srOnly'>Contexts</Typography>\n                    <span className={classes.metaText}>\n                        {props.task.contexts.join(', ')}\n                    </span>\n                </span>\n            )}{' '}\n            {props.task.projects && props.task.projects.length !== 0 && (\n                <span className={classes.metaEntry}>\n                    <TableChartIcon fontSize='inherit' />\n                    <Typography variant='srOnly'>Projects</Typography>\n                    {props.task.projects.join(', ')}\n                </span>\n            )}{' '}\n            {props.task.tags && props.task.tags.length !== 0 && (\n                <span className={classes.metaEntry}>\n                    <LocalOfferIcon fontSize='inherit' />\n                    <Typography variant='srOnly'>Tags</Typography>\n                    <span className={classes.metaText}>\n                        {props.task.tags.join(', ')}\n                    </span>\n                </span>\n            )}{' '}\n            {props.task.start && (\n                <span className={classes.metaEntry}>\n                    <PlayCircleIcon fontSize='inherit' />\n                    <Typography variant='srOnly'>Start date</Typography>\n                    <span className={classes.metaText}>\n                        {new Date(props.task.start).toLocaleDateString()}\n                    </span>\n                </span>\n            )}{' '}\n            {props.task.due && (\n                <span\n                    className={`${classes.metaEntry} ${DueClass(props.task)}`}>\n                    <EventIcon fontSize='inherit' />\n                    <Typography variant='srOnly'>Due date</Typography>\n                    <span className={classes.metaText}>\n                        {new Date(props.task.due).toLocaleDateString()}\n                    </span>\n                </span>\n            )}{' '}\n            {props.task.created && (\n                <AgeDisplay\n                    created={new Date(props.task.created)}\n                    task={props.task}\n                />\n            )}\n        </Fragment>\n    );\n}\n\n/**\n * An item in the task list representing a single item\n *\n * @param props The properties of this component\n */\nexport function TaskListItem(props: TaskListItemProps) {\n    const classes = useStyles();\n    const history = useHistory();\n    return (\n        <ListItem button onClick={() => history.push(`/task/${props.task.id}`)}>\n            <ListItemText\n                primary={props.task.title}\n                secondary={<MetaDisplay task={props.task} />}\n                className={(props.task.done && classes.done) || undefined}\n            />\n        </ListItem>\n    );\n}\n","import React from 'react';\nimport { List } from '@material-ui/core';\nimport { TaskListItem } from './TaskListItem';\nimport { defaultTaskOrder } from '../util/order';\nimport { Task } from 'brain-common';\n\nexport interface TaskListProps {\n    tasks: Task[];\n}\n\nexport function TaskList(props: TaskListProps) {\n    return (\n        <List>\n            {props.tasks.sort(defaultTaskOrder).map(task => (\n                <TaskListItem key={task.id.toString()} task={task} />\n            ))}\n        </List>\n    );\n}\n","import React, { useContext } from 'react';\nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\n\nimport { FilterButton } from './FilterButton';\nimport { GlobalState } from '../model/GlobalState';\nimport { Badge } from '@material-ui/core';\nimport { Dispatcher } from '../util/dispatcher';\n\nexport function DueFilters() {\n    const dispatch = useContext(Dispatcher);\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <FilterButton\n                    icon={\n                        <Badge\n                            invisible={state.dueIn === undefined}\n                            color='secondary'\n                            variant='dot'>\n                            <WatchLaterIcon />\n                        </Badge>\n                    }\n                    text='Due'\n                    entries={[\n                        {\n                            text: 'Overdue',\n                            selected: !!(\n                                state.dueIn !== undefined && state.dueIn === 0\n                            ),\n                            value: 0\n                        },\n                        {\n                            text: 'Today',\n                            selected: !!(\n                                state.dueIn !== undefined && state.dueIn === 1\n                            ),\n                            value: 1\n                        },\n                        {\n                            text: 'Next week',\n                            selected: !!(\n                                state.dueIn !== undefined && state.dueIn === 7\n                            ),\n                            value: 7\n                        },\n                        {\n                            text: 'Next month',\n                            selected: !!(\n                                state.dueIn !== undefined && state.dueIn === 31\n                            ),\n                            value: 31\n                        }\n                    ]}\n                    onChange={selectedEntry => {\n                        dispatch({\n                            type: 'due',\n                            subtype: selectedEntry.selected\n                                ? 'deselect'\n                                : 'select',\n                            value: selectedEntry.value\n                        });\n                    }}\n                />\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import { Fragment } from 'react';\nimport React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    makeStyles,\n    createStyles,\n    Theme,\n    Button\n} from '@material-ui/core';\nimport { ContextsButton } from './ContextsButton';\nimport { ProjectsButton } from './ProjectsButton';\nimport { TagsButton } from './TagsButton';\nimport { fade } from '@material-ui/core/styles';\nimport { overviewFilter } from '../util/Filter';\nimport { GlobalState } from '../model/GlobalState';\nimport { TaskList } from './TaskList';\nimport { DueFilters } from './DueFilters';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        appBar: {\n            top: 'auto',\n            bottom: 0\n        },\n        search: {\n            position: 'relative',\n            borderRadius: theme.shape.borderRadius,\n            backgroundColor: fade(theme.palette.common.white, 0.15),\n            '&:hover': {\n                backgroundColor: fade(theme.palette.common.white, 0.25)\n            },\n            marginLeft: 0,\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                marginLeft: theme.spacing(1),\n                width: 'auto'\n            }\n        },\n        searchIcon: {\n            width: theme.spacing(7),\n            height: '100%',\n            position: 'absolute',\n            pointerEvents: 'none',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        inputRoot: {\n            color: 'inherit'\n        },\n        inputInput: {\n            padding: theme.spacing(1, 1, 1, 7),\n            transition: theme.transitions.create('width'),\n            width: '100%',\n            [theme.breakpoints.up('sm')]: {\n                width: 120,\n                '&:focus': {\n                    width: 200\n                }\n            }\n        },\n        task: {\n            margin: 2\n        },\n        settings: {\n            marginLeft: 'auto',\n            marginRight: 0\n        }\n    })\n);\n\nexport function TaskOverview() {\n    const classes = useStyles();\n    const history = useHistory();\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Fragment>\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <ContextsButton />\n                            <ProjectsButton />\n                            <TagsButton />\n                            <DueFilters />\n                            <Button\n                                className={classes.settings}\n                                onClick={() => history.push('/config')}>\n                                <SettingsIcon className={classes.settings} />\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                    <TaskList\n                        tasks={overviewFilter(\n                            state.config,\n                            state.tasks,\n                            state.selectedContexts,\n                            state.selectedProjects,\n                            state.selectedTags,\n                            state.dueIn\n                        )}\n                    />\n                </Fragment>\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import { Fragment } from 'react';\nimport React from 'react';\nimport { GlobalState } from '../model/GlobalState';\nimport { TaskList } from './TaskList';\nimport { inboxFilter } from '../util/Filter';\nimport {\n    AppBar,\n    Toolbar,\n    makeStyles,\n    createStyles,\n    Button\n} from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        appBar: {\n            top: 'auto',\n            bottom: 0\n        },\n        settings: {\n            marginLeft: 'auto',\n            marginRight: 0\n        }\n    })\n);\n\nexport function Inbox() {\n    const classes = useStyles();\n    const history = useHistory();\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Fragment>\n                    <TaskList tasks={inboxFilter(state.config, state.tasks)} />\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <Button\n                                className={classes.settings}\n                                onClick={() => history.push('/config')}>\n                                <SettingsIcon className={classes.settings} />\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Fragment>\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import { Fragment } from 'react';\nimport React from 'react';\nimport { GlobalState } from '../model/GlobalState';\nimport { TaskList } from './TaskList';\nimport { somedayMaybeFilter } from '../util/Filter';\nimport AppBar from '@material-ui/core/AppBar';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport { Toolbar, Button } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        appBar: {\n            top: 'auto',\n            bottom: 0\n        },\n        settings: {\n            marginLeft: 'auto',\n            marginRight: 0\n        }\n    })\n);\n\nexport function SomedayMaybe() {\n    const classes = useStyles();\n    const history = useHistory();\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Fragment>\n                    <TaskList tasks={somedayMaybeFilter(state.tasks)} />\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <Button\n                                className={classes.settings}\n                                onClick={() => history.push('/config')}>\n                                <SettingsIcon className={classes.settings} />\n                            </Button>\n                        </Toolbar>\n                    </AppBar>\n                </Fragment>\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import {\n    Tab,\n    Tabs,\n    Typography,\n    Fab,\n    Theme,\n    useMediaQuery\n} from '@material-ui/core';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport ListIcon from '@material-ui/icons/List';\nimport AddIcon from '@material-ui/icons/Add';\nimport AllInclusiveIcon from '@material-ui/icons/AllInclusive';\nimport React, { Fragment } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport { TaskOverview } from './TaskOverview';\nimport { Inbox } from './Inbox';\nimport { SomedayMaybe } from './SomedayMaybe';\nimport { useHistory, Route, Switch } from 'react-router';\nimport { GlobalState } from '../model/GlobalState';\n\ninterface TabPanelProps {\n    index: number;\n    children?: React.ReactNode;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    return (\n        <Typography\n            component='div'\n            role='tabpanel'\n            id={`full-width-tabpanel-${props.index}`}>\n            {props.children}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        addButton: {\n            position: 'fixed',\n            zIndex: 1,\n            bottom: 75,\n            left: 0,\n            right: 0,\n            marginLeft: 'auto',\n            marginRight: 10\n        },\n        tabs: {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            width: '100%',\n            zIndex: 1\n        },\n        tabPanel: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            overflowY: 'auto'\n        },\n        smallBorder: {\n            marginTop: theme.spacing(6),\n            marginBottom: theme.spacing(6)\n        },\n        normalBorder: {\n            marginTop: theme.spacing(9),\n            marginBottom: theme.spacing(8)\n        }\n    })\n);\n\nfunction TabHeader(props: {\n    path: string;\n    inboxEmpty: boolean;\n    somedayMaybeEmpty: boolean;\n}) {\n    const history = useHistory();\n    const classes = useStyles();\n    const smallScreen = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('xs')\n    );\n    return (\n        <Tabs\n            variant='fullWidth'\n            indicatorColor='primary'\n            value={props.path}\n            className={classes.tabs}>\n            <Tab\n                icon={<ListIcon />}\n                label={smallScreen ? undefined : 'Tasks'}\n                aria-label='Tasks'\n                value='/'\n                onClick={ev => history.push('/')}\n            />\n            <Tab\n                icon={<InboxIcon />}\n                label={smallScreen ? undefined : 'Inbox'}\n                aria-label='Inbox'\n                disabled={props.inboxEmpty}\n                value='/inbox'\n                onClick={ev => history.push('/inbox')}\n            />\n            <Tab\n                icon={<AllInclusiveIcon />}\n                label={smallScreen ? undefined : 'Someday/Maybe'}\n                aria-label='Inbox'\n                disabled={props.somedayMaybeEmpty}\n                value='/someday'\n                onClick={ev => history.push('/someday')}\n            />\n        </Tabs>\n    );\n}\n\nfunction TabContent() {\n    const classes = useStyles();\n    const smallScreen = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('xs')\n    );\n    return (\n        <div\n            className={`${classes.tabPanel} ${\n                smallScreen ? classes.smallBorder : classes.normalBorder\n            }`}>\n            <Switch>\n                <Route exact path='/'>\n                    <TabPanel index={0}>\n                        <TaskOverview />\n                    </TabPanel>\n                </Route>\n                <Route path='/inbox'>\n                    <TabPanel index={1}>\n                        <Inbox />\n                    </TabPanel>\n                </Route>\n                <Route path='/someday'>\n                    <TabPanel index={2}>\n                        <SomedayMaybe />\n                    </TabPanel>\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport function MainView() {\n    const history = useHistory();\n    const classes = useStyles();\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Route\n                    render={match => (\n                        <Fragment>\n                            <TabHeader\n                                path={match.location.pathname}\n                                inboxEmpty={state.inboxEmpty}\n                                somedayMaybeEmpty={state.somedayMaybeEmpty}\n                            />\n                            {/* <SwipeableViews\n            axis='x'\n            index={value}\n            onChangeIndex={newValue => {\n                setValue(newValue);\n            }}\n            style={{\n                top: 'auto',\n                bottom: 0\n            }}> */}\n                            <TabContent />\n                            <Fab\n                                color='secondary'\n                                aria-label='add'\n                                className={classes.addButton}\n                                onClick={() => history.push('/newTask')}>\n                                <AddIcon />\n                            </Fab>\n                            {/* </SwipeableViews> */}\n                        </Fragment>\n                    )}\n                />\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import React, { Fragment, useContext } from 'react';\nimport {\n    FormControl,\n    Checkbox,\n    FormControlLabel,\n    Button\n} from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport { Dispatcher } from '../util/dispatcher';\nimport { useHistory } from 'react-router';\nimport { GlobalState } from '../model/GlobalState';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        backButton: {\n            marginLeft: 0,\n            marginRight: 'auto'\n        },\n        backButtonRoot: {\n            display: 'flex'\n        }\n    })\n);\n\nexport function ConfigEditor() {\n    const classes = useStyles();\n    const dispatch = useContext(Dispatcher);\n    const history = useHistory();\n    return (\n        <GlobalState.Consumer>\n            {state => (\n                <Fragment>\n                    <div className={classes.backButtonRoot}>\n                        <Button\n                            className={classes.backButton}\n                            onClick={() => history.goBack()}>\n                            <ChevronLeftIcon fontSize='large' />\n                        </Button>\n                    </div>\n                    <h1>Configuration</h1>\n                    <FormControl>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    id='showDone'\n                                    checked={state.config.showDone}\n                                    onChange={ev =>\n                                        dispatch({\n                                            type: 'config',\n                                            setting: 'showDone',\n                                            value: ev.target.checked\n                                        })\n                                    }\n                                />\n                            }\n                            label='Show finished tasks'\n                        />\n                    </FormControl>\n                    <FormControl>\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    id='showFutureStart'\n                                    checked={!!state.config.showFutureStart}\n                                    onChange={ev =>\n                                        dispatch({\n                                            type: 'config',\n                                            setting: 'showFutureStart',\n                                            value: ev.target.checked\n                                        })\n                                    }\n                                />\n                            }\n                            label='Show tasks with a start date in the future'\n                        />\n                    </FormControl>\n                </Fragment>\n            )}\n        </GlobalState.Consumer>\n    );\n}\n","import React, { useReducer, useContext, useEffect } from 'react';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    useParams\n} from 'react-router-dom';\nimport './App.css';\nimport { Task } from 'brain-common';\nimport { Guid } from 'guid-typescript';\nimport { TaskEditor } from './components/TaskEditor';\nimport { reduce, Dispatcher } from './util/dispatcher';\nimport { IGlobalState, GlobalState } from './model/GlobalState';\nimport { LocalStorage } from './storage/LocalStorage';\nimport { MainView } from './components/MainView';\nimport { createMuiTheme } from '@material-ui/core';\nimport { green, red } from '@material-ui/core/colors';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { ConfigEditor } from './components/ConfigEditor';\n\nfunction FindTask() {\n    const { id } = useParams();\n    const taskId = id && Guid.parse(id);\n    const state = useContext(GlobalState);\n\n    const task: Task =\n        (taskId && state.tasks.find(t => t.id.equals(taskId))) ||\n        ({ id: Guid.create() } as Task);\n    return <TaskEditor task={task} />;\n}\n\nconst storage = new LocalStorage();\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n        secondary: red\n    }\n});\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useReducer(reduce.bind(null, storage), {\n        tasks: [] as Task[],\n        contexts: [] as string[],\n        projects: [] as string[],\n        tags: [] as string[],\n        selectedContexts: [] as string[],\n        selectedProjects: [] as string[],\n        selectedTags: [] as string[],\n        config: { showDone: false }\n    } as IGlobalState);\n    useEffect(() => {\n        storage\n            .loadTasks()\n            .then(tasks =>\n                dispatch({ type: 'bulk', subtype: 'load', tasks: tasks })\n            );\n        storage\n            .config()\n            .then(config => dispatch({ type: 'loadConfig', config: config }));\n    }, []);\n    return (\n        <Router>\n            <Dispatcher.Provider value={dispatch}>\n                <GlobalState.Provider value={state}>\n                    <ThemeProvider theme={theme}>\n                        <div className='App'>\n                            <Switch>\n                                <Route exact path={['/', '/inbox', '/someday']}>\n                                    <MainView />\n                                </Route>\n                                <Route path='/task/:id'>\n                                    <FindTask />\n                                </Route>\n                                <Route path='/newTask'>\n                                    <TaskEditor\n                                        task={{\n                                            id: Guid.create(),\n                                            title: '',\n                                            version: 0,\n                                            hash: ''\n                                        }}\n                                        isNew\n                                    />\n                                </Route>\n                                <Route path='/config'>\n                                    <ConfigEditor />\n                                </Route>\n                            </Switch>\n                        </div>\n                    </ThemeProvider>\n                </GlobalState.Provider>\n            </Dispatcher.Provider>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}